@using (Html.BeginForm())
{
    <div class="container">
        <form class="form-horizontal">
            <div class="form-group">
                <div class="container">
                    <h3>Ostoskorissa <span class="cartsum"></span> tuotetta / Antal produkter i varukorgen <span class="cartsum"></span></h3>
                    <table class="table table-bordered" id="selection_table">
                        <thead>
                            <tr>
                                <th hidden>OrderID</th>
                                <th>ISBN <span class="fa fa-sort"></span></th>
                                <th>Tekijä / Författare <span class="fa fa-sort"></span></th>
                                <th>Nimi / Titel <span class="fa fa-sort"></span></th>
                                <th>Kustantaja / Förlag <span class="fa fa-sort"></span></th>
                                <th>Hinta / Pris (alv 0%) <span class="fa fa-sort"></span></th>
                                <th></th>
                            </tr>
                        </thead>

                    </table>
                    <div class="row">
                        <div class="col-md-4"></div>
                        <div class="col-md-3"></div>
                        <div class="col-md-5" style="font-size:22px">Hinta yhteensä / Totalt pris <span class="pricesum"></span> €</div>
                    </div>
                    <br />
                    <br />
                    <br />
                    <div class="row">
                        <div class="col-md-7"></div>
                        <div class="col-md-2" style="font-size: 14px">
                            @Html.ActionLink("Jatka ostoksia", "Index", "NV")

                        </div>
                        <div class="spinner-border"></div>
                        <div class="col-md-2">
                            <button type="submit" id="send" class="btn button">
                                Lähetä tilaus / Skicka order
                            </button>
                        </div>
                    </div>
                </div>
                <br>
                <br>
                <br>

            </div>
        </form>
    </div>

}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jquery")

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
    <link href="~/Content/MyStyle.css" rel="stylesheet" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/css/flag-icon.min.css" rel="stylesheet" />


    <script>

        //sivun alustus
        $(document).ready(function () {
            var selection = $('#selection');
             var cartuser = @HttpContext.Current.User.Identity.Name;

            //spinneri näyttämään että tallennus on kesken
            $(document).ajaxStart(function () {
                $(".spinner-border").show();
            }).ajaxStop(function () {
                $(".spinner-border").hide('slow');
            });

            // ostoskorin tiedot navigointipaneeliin
            $.ajax({
                type: 'GET',
                url: '/api/CartsAPI',
                dataType: 'json',
            }).then(function (data) {
                let counter = 0;
                $.each(data, function (index, val) {
                    if (val.CompanyID == cartuser && val.IsInCart == true) {
                        counter = counter + 1;
                    }
                });
                $('#cartsum').empty().append(counter);
            })

            //haetaan ostoskorin tiedot CompanyID:n perusteella
            $.ajax({
                type: 'GET',
                url: '/api/Cart_NotSentToJvs',
                dataType: 'json',
                success: function (data) {
                    $.each(data, function (i, val) {
                        if (val.CompanyID == cartuser && val.IsInCart == true) {
                            //luodaan taulukko, johon arvot tuodaan halutuista sarakkeista
                            selection +=
                                '<tr >' +
                                "<td hidden>" + val.OrderID + "</td>" +
                                "<td>" + val.ISBN + "</td>" +
                                "<td>" + val.Author + "</td>" +
                                "<td>" + val.BookName + "</td>" +
                                "<td>" + val.Publisher + "</td>" +
                                "<td id='price'>" + val.Price + "€ </td>" +
                                "<td><a href='#'><span class='fa fa-trash'></span></a></td>" +
                                '</tr>';
                        }
                    });
                    //näytetään taulukko sivulla
                    $('#selection_table').append(selection);

                    //lasketaan ostoskorissa olevien tuotteiden määrä
                    var rowCount = $('#selection_table tr').length - 1;
                    $('.cartsum').append(rowCount);

                    //lasketaan ostoskorissa olevien hinta yhteensä
                    var sum = 0;
                    $('td[id^="price"]').each(function (k, v) {
                        sum += parseFloat($(this).text());
                        if (k === $('td[id^="price"]').length - 1) $('#sum').text(sum);
                    });
                    $('.pricesum').text(sum.toFixed(2));

                    //tuotteen poisto ostoskorista
                    $(".fa-trash").on("click", function () {
                        var OrderID = $(this).parent().parent().prev().prev().prev().prev().prev().prev().text();
                        var ISBN = $(this).parent().parent().prev().prev().prev().prev().prev().text();
                        var ok = confirm("Haluatko poistaa tuotteen " + ISBN + " ostoskorista? Vill du radera ordern på " + ISBN + " från varukorgen? ");

                        if (ok == true) {
                            $.ajax({
                                type: 'DELETE',
                                url: '/api/CartsAPI/' + OrderID,
                                contentType: 'application/json',
                                global: false,
                                success: function () {
                                    alert('Tuote poistettu. Produkten är annullerad');
                                    location.reload(); //sivun uudelleen lataus
                                },
                                error: function () {
                                    alert('Poisto epäonnistui')
                                }
                            });
                        }
                    });

                    //kuluvan päivän funktio
                    function getdate() {
                        var d = new Date();
                        var month = d.getMonth() + 1;
                        var day = d.getDate();
                        var year = d.getFullYear();
                        return date = year + '/' +
                            (('' + month).length < 2 ? '0' : '') + month + '/' +
                            (('' + day).length < 2 ? '0' : '') + day;
                    }
                    //valikoiman viitetieto Seasons-kannasta tilauksen päivämäärän perusteella
                    var matchGetReference = [];
                    function getReferenceByDate(season) {

                        var startdate = season.StartDate; // MM-DD-YYYY Valikoiman ensimmäinen tilauspäivä
                        var stopdate = season.StopDate; // MM-DD-YYYY Valikoiman viimeinen tilauspäivä
                        var ref = season.Reference;
                        var thisdate = new Date();
                        //Date.parse jäsentää päivämäärämerkkijonon ja palauttaa millisekuntien lukumäärän päivämäärämerkkijonon ja 1. tammikuuta 1970 keskiyön välillä.
                        var from = Date.parse(startdate);
                        var to = Date.parse(stopdate);
                        var now = Date.parse(thisdate);

                        if (now <= to && now >= from) {
                            return ref;
                        }
                    }
                    $.ajax({
                        type: 'GET',
                        url: '/api/SeasonsAPI',
                        datatype: 'json',
                        success: function (data) {
                            $.each(data, function (i, season) {
                                var returnRef = getReferenceByDate(season)
                                if (returnRef != undefined) {
                                    matchGetReference.push(returnRef);
                                }
                            })
                        }
                    });

                    $('#send').click(function (e) {
                        e.preventDefault();
                        var ok = confirm("Haluatko varmasti lähettää tilauksen? Är du säker att du vill avsluta ordern?");
                        if (ok == true) {
                            $.ajax({
                                type: 'GET',
                                url: '/api/cartsAPI',
                                dataType: 'json',
                                success: function (data) {
                                    var present = false;
                                    $.each(data, function (i, sel) {
                                        if (sel.CompanyID == cartuser && sel.IsInCart == true) {
                                            var cart = {
                                                OrderID: sel.OrderID,
                                                CompanyID: sel.CompanyID,
                                                Orderdate: new Date(),
                                                ISBN: sel.ISBN,
                                                BookName: sel.BookName,
                                                Author: sel.Author,
                                                Publisher: sel.Publisher,
                                                Price: sel.Price,
                                                Season: sel.Season,
                                                IsInCart: false,
                                                SentToJvs: false,
                                                
                                            };
                                            if (matchGetReference[0] != undefined) {
                                                cart.Reference = matchGetReference[0];
                                            }
                                            $.ajax({
                                                method: 'put',
                                                url: '/api/cartsAPI/' + cart.OrderID,
                                                data: JSON.stringify(cart),
                                                contentType: 'application/json',
                                                success: function () {
                                                    //console.log('Tilaus tallennettu')
                                                    location.reload();
                                                    localStorage.removeItem('cart');
                                                },
                                                error: function (xhr, ajaxOptions, thrownError) {
                                                    alert('Virhe');
                                                    console.log("Virhe: " + xhr.responseText + " " + xhr.statusText + " " + thrownError );
                                                }
                                            });
                                        }
                                    });
                                    alert('Tilaus on lähetetty. Ordern är skickad.');
                                }
                            });
                        }
                    });
                },
            });

            //etsi -toiminto
            $("#search").on("keyup", function () {
                var value = $(this).val().toLowerCase();
                $("#selection_table tr").filter(function () {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                });
            });

            //taulun sorttaus
            const getCellValue = (tr, idx) => tr.children[idx].innerText || tr.children[idx].textContent;

            const comparer = (idx, asc) => (a, b) => ((v1, v2) =>
                v1 !== '' && v2 !== '' && !isNaN(v1) && !isNaN(v2) ? v1 - v2 : v1.toString().localeCompare(v2)
            )(getCellValue(asc ? a : b, idx), getCellValue(asc ? b : a, idx));

            document.querySelectorAll('th').forEach(th => th.addEventListener('click', (() => {
                const table = th.closest('#selection_table')
                Array.from(table.querySelectorAll('tr:nth-child(n+2)'))
                    .sort(comparer(Array.from(th.parentNode.children).indexOf(th), this.asc = !this.asc))
                    .forEach(tr => table.appendChild(tr));
            })));
        });
    </script>

}